// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    google_id, email
) VALUES (
             $1, $2
         )
RETURNING id
`

type CreateUserParams struct {
	GoogleID string
	Email    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRow(ctx, createUser, arg.GoogleID, arg.Email)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getUserByExternalID = `-- name: GetUserByExternalID :one
SELECT id, google_id, email, created_at FROM users
WHERE google_id = $1 LIMIT 1
`

func (q *Queries) GetUserByExternalID(ctx context.Context, googleID string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByExternalID, googleID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GoogleID,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
